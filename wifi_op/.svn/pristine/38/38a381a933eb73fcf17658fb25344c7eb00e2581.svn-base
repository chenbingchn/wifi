<?php

namespace app\controllers;

use app\models\Banner;
use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\filters\VerbFilter;
use app\models\Article;
use app\models\Integral;
use app\models\SignupForm;
use app\models\LoginForm;
use app\models\ContactForm;
use app\models\FindContent;
use app\models\Mainclass;
use app\models\Categorys;
use app\models\Account;
use app\models\Events;
use app\models\Useridscorelimit;
use app\models\Scorelimitconfig;
use app\models\Imeiscorelimit;

class SiteController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout', 'signup'],
                'rules' => [
					[
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionIndex()
    {
        return $this->render('newindex');
    }

    public function actionLogin()
    {
        if (!\Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        } else {
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->contact(Yii::$app->params['adminEmail'])) {
            Yii::$app->session->setFlash('contactFormSubmitted');

            return $this->refresh();
        } else {
            return $this->render('contact', [
                'model' => $model,
            ]);
        }
    }

    public function actionAbout()
    {
        return $this->render('about');
    }
	
	public function actionSignup()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post())) {
            if ($user = $model->signup()) {
                if (Yii::$app->getUser()->login($user)) {
                    return $this->goHome();
                }
            }
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    public function actionPoins_mall()
    {
        $row=Integral::find()->all();

        return $this->renderPartial('Poins_mall',['row'=>$row]);
    }

    public function actionEarn_poins()
    {
        $type = 3;
        $ep=$_GET['language'];
        $user=$_GET['id'];
        $imei=$_GET['imei'];
        switch($ep){
            case 'zh_CN':
                $langC="Contentzh";
                $langT="titlezh";
                break;
            case 'in_ID':
                $langC="Contentyn";
                $langT="titleyn";
                break;
            default:
                $langC="Content";
                $langT="title";
        }
        $display=Events::find()->where(['flag'=>'0'])->all();//显示已经开放的活动信息

        $max=Scorelimitconfig::find()->all();

        $name=Account::find()->where(['user_id'=> $user])->one();

        if($user != -1){
            $datenow=date('Y-m-d');
            $sharewifi=Useridscorelimit::find()->where(['id'=>$user,'date'=>$datenow,'type'=>2,'count'=>$max[2]['limits']])->all();//分享的wifi总上限
            $sharefrd=Useridscorelimit::find()->where(['id'=>$user,'date'=>$datenow,'type'=>5,'count'=>$max[5]['limits']])->all();//分享给我朋友的总上线
            $integral='';
            $master = Account::find()->andFilterWhere(['=','master_uid',$user])->one();
            if($master == null) {
                $third = Account::find()->select(['third_type'])->andFilterWhere(['=', 'user_id', $user])->one();
                switch ($third['third_type']) {
                    case 0 :
                        $type = 0;
                        break;
                    case 2 :
                        $type = 2;
                        break;
                    default :
                        $type = '';
                }
            }else{
                $type = 1;
            }
        }elseif($imei != -1){
            $datenow=date('Y-m-d');
            $sqls="select * from imei_score WHERE id=$imei";
            $integral=Yii::$app->db->createCommand($sqls)->queryOne();
            $sharewifi=Imeiscorelimit::find()->where(['id'=>$imei,'date'=>$datenow,'type'=>2,'count'=>$max[2]['limits']])->all();//分享的wifi总上限
            $sharefrd=Imeiscorelimit::find()->where(['id'=>$imei,'date'=>$datenow,'type'=>5,'count'=>$max[5]['limits']])->all();//分享给我朋友的总上线
        }else{
            $integral='';
            $sharewifi='';
            $sharefrd='';
        }


        $row=Article::find()->all();

        return $this->renderPartial('Earn_poins',[
            'type' => $type,
            'ep' => $ep,
            'row'=>$row,
            'user'=>$user,
            'imei'=>$imei,
            'langC'=>$langC,
            'langT'=>$langT,
            'display'=>$display,
            'name'=>$name,
            'integral'=>$integral,
            'sharewifi'=>$sharewifi,
            'sharefrd'=>$sharefrd,

        ]);
    }

    public function actionFind()
    {
        $class=Mainclass::find()->all();
        $categorys=Categorys::find()->all();
        $find=FindContent::find()->all();
        $show=FindContent::find()->where(['show' => 1])->all();
        $banners = Banner::find()->where(['type' => 2, 'state' => 1])->all();

        return $this->renderPartial('find',[
            'class' => $class,
            'categorys' => $categorys,
            'find' => $find,
            'show'=>$show,
            'banners' => $banners,
        ]);
    }

    public function actionControl()
    {
        return $this->renderPartial('control');
    }

    public function actionEladies()
    {
        return $this->renderPartial('Eladies');
    }
    public function actionShow()
    {
        return $this->renderPartial('show');
    }
    
    public function actionGuidance(){
        $language = isset($_GET['language'])?$_GET['language']:null;
        if($language=='in_ID'){
            return $this->renderPartial('guidance_ID');
        }else{
            return $this->renderPartial('guidance');
        }
    }

    public function actionScreening(){
        $start_time = array();
        $end_time = array();
        return $this->render('screening',['start_time' => $start_time,'end_time' => $end_time]);
    }
}
